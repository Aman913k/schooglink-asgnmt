basePath: /
definitions:
  models.Post:
    description: Post model
    properties:
      author:
        type: string
      content:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    description: User model
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  description: This is the main entry point for the Blog Platform API server.
  title: Blog Platform API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid email or password
          schema:
            type: string
      summary: Login user
      tags:
      - Auth
  /posts:
    delete:
      consumes:
      - application/json
      description: Delete a post by post ID.
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            type: string
        "400":
          description: Post ID is required
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Failed to delete post
          schema:
            type: string
      summary: Delete a post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get all blog posts.
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "500":
          description: Failed to fetch posts
          schema:
            type: string
      summary: Get all posts
      tags:
      - Posts
  /posts/{post_id}:
    get:
      consumes:
      - application/json
      description: Get a blog post by post ID.
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Invalid Post ID format
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Database error
          schema:
            type: string
      summary: Get a post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update the post details of a logged-in user.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated post data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            type: string
        "400":
          description: Invalid post data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Failed to update post
          schema:
            type: string
      summary: Update a post
      tags:
      - Posts
  /posts/create:
    post:
      consumes:
      - application/json
      description: Allows a logged-in user to create a new blog post. The user's email
        and name are retrieved from the request context.
      parameters:
      - description: Post content
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid post data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Failed to create post
          schema:
            type: string
      summary: Create a new post
      tags:
      - Posts
  /profile/{id}:
    put:
      consumes:
      - application/json
      description: Update the profile details of a logged-in user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Invalid user data
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Failed to update profile
          schema:
            type: string
      summary: Update user profile
      tags:
      - Profile
  /profile/view:
    get:
      description: View profile details of the logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: View user profile
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Email already in use
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
schemes:
- http
swagger: "2.0"
